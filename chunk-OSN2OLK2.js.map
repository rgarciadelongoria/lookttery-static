{
  "version": 3,
  "sources": ["src/bootstrap.ts", "src/app/app.config.ts", "src/app/components/remote-app/pages/scan/scan.component.ts", "src/app/components/remote-app/pages/scan/scan.component.html", "src/app/enums/shell.enum.ts", "src/app/enums/global.enum.ts", "src/app/services/ticket.service.ts", "src/environments/environment.development.ts", "src/app/services/api.service.ts", "src/app/services/storage.service.ts", "src/app/services/uuid.service.ts", "src/app/services/user.service.ts", "src/app/services/core.service.ts", "src/app/components/remote-app/pages/main/main.component.ts", "src/app/components/remote-app/pages/main/main.component.html", "src/app/components/remote-app/remote-app.component.ts", "src/app/components/remote-app/remote-app.component.html", "src/app/utils/custom-translate-loader.ts", "src/app/services/game.service.ts", "src/app/components/remote-app/pages/tickets/tickets.component.ts", "src/app/components/remote-app/pages/tickets/tickets.component.html", "src/app/components/remote-app/components/header/header.component.ts", "src/app/components/remote-app/components/header/header.component.html", "src/app/pipes/custom-date.pipe.ts", "src/app/components/remote-app/pages/menu/menu.component.ts", "src/app/components/remote-app/pages/menu/menu.component.html", "src/app/app.routes.ts", "src/app/app.component.ts", "src/app/app.component.html"],
  "sourcesContent": ["import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));\n", "import { ApplicationConfig } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes)\n  ]\n};\n", "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, HostListener, OnInit } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { ShellEvents } from '@enums/shell.enum';\nimport { TicketService } from '@services/ticket.service';\nimport { GlobalKeys } from '@enums/global.enum';\nimport { UuidService } from '@services/uuid.service';\nimport { UserService } from '@services/user.service';\n\n@Component({\n  selector: 'app-scan',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    IonicModule\n  ],\n  templateUrl: './scan.component.html',\n  styleUrl: './scan.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScanComponent implements OnInit {\n  @HostListener(`window:${ShellEvents.SHELL_SCANNER_RESPONSE}`, ['$event'])\n  async handleShellScannerResponse(event: any) {\n    await this.onScannerResponse(event.detail?.response || {});\n  }\n\n  @HostListener(`window:${ShellEvents.SHELL_SCANNER_ERROR}`, ['$event'])\n  async handleShellScannerError(event: any) {\n    await this.onScannerError(event.detail?.response || {});\n  }\n\n  public hasShell = false;\n  public responses: any[] = [];\n  public hasPermission = true;\n  \n  constructor(\n    private readonly router: Router,\n    private readonly ticketSrv: TicketService,\n    private readonly uuidSrv: UuidService,\n    private readonly userSrv: UserService\n  ) {}\n\n  ngOnInit(): void {}\n\n  async ionViewDidEnter(): Promise<void> {\n    await this.startScan();\n  }\n\n  ionViewWillLeave(): void {\n    this.stopScan();\n  }\n\n  public async startScan(event?: any): Promise<void> {\n    this.hasPermission = true;\n    window.dispatchEvent(new CustomEvent(ShellEvents.SHELL_SCANNER_START));\n  }\n  public stopScan(event?: any): void {\n    window.dispatchEvent(new CustomEvent(ShellEvents.SHELL_SCANNER_STOP));\n  }\n\n  public permissionResponse(event: any): void {\n    this.hasPermission = event || false;\n  }\n\n  private async onScannerResponse(response: any): Promise<void> {\n    if (this.checkUuidQRCode(response.content || '')) {\n      const uuid = response.content.toString().replace(GlobalKeys.UUID_QR_CODE, '');\n      this.uuidSrv.updateAppUuid(uuid);\n      await this.userSrv.loginByUuid(uuid);\n    } else if (response) {\n      const ticketData = await this.ticketSrv.createNewTicket(response.content || '');\n    }\n    this.exit();\n  }\n\n  private async onScannerError(response: any): Promise<void> {\n    console.log(response);\n    this.hasPermission = false;\n  }\n\n  private exit(): void {\n    this.router.navigate(['/main/', 'tickets']);\n  }\n\n  private checkUuidQRCode(response: any): boolean {\n    if (response.toString().includes(GlobalKeys.UUID_QR_CODE)) {\n      return true;\n    }\n    return false;\n  }\n}\n", "<section class=\"scan\">\n    <section class=\"scan-screen\">\n        @if(!hasPermission) {\n            <article>Camera permission denied.</article>\n        } @else {\n            <ion-icon class=\"scan-screen-pointer\" name=\"add-outline\"></ion-icon>\n        }\n    </section>\n</section>", "export enum ShellActions {\n    SHELL_VERSION = \"shellVersion\",\n}\n\nexport enum ShellEvents {\n    SHELL_DEVICE_GET_ID = \"shellDeviceGetId\",\n    SHELL_SCANNER_RESPONSE = \"shellScannerResponse\",\n    SHELL_SCANNER_START = \"shellScannerStart\",\n    SHELL_SCANNER_STOP = \"shellScannerStop\",\n    SHELL_SCANNER_ERROR = \"shellScannerError\",\n    SHELL_DEVICE_GET_ID_RESPONSE = \"shellDeviceGetIdResponse\"\n}\n\nexport enum ShellErrors {\n    SHELL_LOADING_REMOTE_OK = \"shellLoadingRemoteOk\",\n}", "export enum LocalStorageKeys {\n    TOKEN = \"token\",\n    APP_UUID = \"appUuid\",\n}\n\nexport enum LogKeys {\n    SYSTEM = \"[SYSTEM]\",\n}\n\nexport enum GlobalKeys {\n    UUID_EMAIL_DOMAIN = \"@uuid.app\",\n    UUID_QR_CODE = \"app-uuid-code:\",\n}\n\nexport enum GameCodes {\n    LOTERIA_NACIONAL = 'ln',\n}\n\nexport enum AlertCodes {\n    CANCEL = 'CANCEL',\n    ACCEPT = 'ACCEPT',\n}", "import { Injectable } from '@angular/core';\nimport { ApiService } from '@services/api.service';\nimport { TicketData } from '@interfaces/ticket.interface';\nimport { environment } from '@environments/environment';\nimport { lastValueFrom } from 'rxjs';\nimport { AlertCodes } from '../enums/global.enum';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  private apiTicket = `${environment.api.host}${'/ticket'}`;\n\n  constructor(\n    private alertController: AlertController,\n    private translateSrv: TranslateService,\n    private readonly apiSrv: ApiService,\n  ) {}\n\n  public async createNewTicket(code: string): Promise<TicketData> {\n    const body: TicketData = {\n      data: {\n        info: {\n          code\n        }\n      }\n    };\n\n    try {\n      const ticketData$ = this.apiSrv.post<TicketData>(this.apiTicket, body);\n      const ticketData = await lastValueFrom(ticketData$);\n      return ticketData;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async deleteTicketById(id: string, alert = false): Promise<TicketData | undefined> {\n\n    let role = AlertCodes.ACCEPT;\n\n    if (alert) {\n      role = await this.presentAlertConfirmDeleteTicket();\n    }\n\n    if (role === AlertCodes.ACCEPT) {\n      try {\n        const ticketData$ = await this.apiSrv.delete<TicketData>(`${this.apiTicket}/${id}`);\n        const ticketData = await lastValueFrom(ticketData$);\n        return ticketData;\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    return undefined;\n  }\n\n  private async presentAlertConfirmDeleteTicket(): Promise<AlertCodes> {\n    const alert = await this.alertController.create({\n      header: this.translateSrv.instant('TICKETS.DELETE_TICKET'),\n      subHeader: this.translateSrv.instant('GLOBAL.IRREVERSIBLE_ACTION'),\n      message: this.translateSrv.instant('TICKETS.DELETE_TICKET_QUESTION'),\n      buttons: [\n        {\n          text: this.translateSrv.instant('GLOBAL.CANCEL'),\n          role: AlertCodes.CANCEL,\n          handler: () => {\n            // Nothing to do\n          },\n        },\n        {\n          text: this.translateSrv.instant('GLOBAL.ACCEPT'),\n          role: AlertCodes.ACCEPT,\n          handler: () => {\n            // Nothing to do\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n\n    const { role } = await alert.onDidDismiss();\n    return role as AlertCodes;\n  }\n}\n", "export const environment = {\n    api: {\n        host: 'http://192.168.1.40:3000/api',\n    },\n    web: {\n        host: 'http://192.168.1.40:4201'\n    }\n}", "import { HttpClient, HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, delay, retry, throwError } from 'rxjs';\nimport { LocalStorageKeys } from '@enums/global.enum';\nimport { Router } from '@angular/router';\nimport { StorageService } from './storage.service';\n\nexport interface HttpOptions {\n  headers?: HttpHeaders | {\n      [header: string]: string | string[];\n  };\n  context?: HttpContext;\n  observe?: 'body';\n  params?: HttpParams | {\n      [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n  };\n  reportProgress?: boolean;\n  responseType?: 'json';\n  withCredentials?: boolean;\n  transferCache?: {\n      includeHeaders?: string[];\n  } | boolean;\n}\n\nexport enum HttpApiErrors {\n  UNAUTHORIZED = 'Unauthorized',\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly router: Router,\n    private readonly storageSrv: StorageService,\n  ) { }\n\n  /*\n  HTTP Methods\n  */\n\n  public get<T>(url: string, options?: HttpOptions): Observable<T> {\n    options = this.addTokenToHeaders(options);\n\n    return this.http.get<T>(url, options);\n  }\n\n  public post<T>(url: string, body: any | null, options?: HttpOptions): Observable<T> {\n    options = this.addPostHeaders(options);\n    options = this.addTokenToHeaders(options);\n    \n    return this.http.post<T>(url, body, options)\n    .pipe(this.handleErrorAndRedirect())\n  }\n\n  public delete<T>(url: string, options?: HttpOptions): Observable<T> {\n    options = this.addTokenToHeaders(options);\n\n    return this.http.delete<T>(url, options);\n  }\n\n  /*\n  Interceptor logic\n  */\n\n  private addTokenToHeaders(options?: HttpOptions): HttpOptions {\n    const currentTokenData = this.storageSrv.getItem(LocalStorageKeys.TOKEN);\n\n    const headers: [string, string][] = [\n      ['Authorization', `Bearer ${currentTokenData?.token}`]\n    ];\n\n    return this.addHeaders(headers, options);\n  }\n\n  private addPostHeaders(options?: HttpOptions): HttpOptions {\n    const headers: [string, string][] = [\n      ['Content-Type', 'application/json']\n    ];\n\n    return this.addHeaders(headers, options);\n  }\n\n  private addHeaders(headers: [string, string][], options?: HttpOptions): HttpOptions {\n    headers.forEach(header => {\n      options = options || {};\n      options.headers = options.headers || {};\n      if (options.headers instanceof HttpHeaders) {\n        options.headers = options.headers.append(header[0], header[1]);\n      } else if (typeof options.headers === 'object') {\n        options.headers[header[0]] = header[1];\n      }\n    });\n\n    return options || {};\n  }\n\n  private handleErrorAndRedirect() {\n    return catchError(async (err: any, caught: Observable<any>) => {\n      if (err.status === 401 && err.statusText === HttpApiErrors.UNAUTHORIZED) {\n        this.storageSrv.removeItem(LocalStorageKeys.TOKEN);\n        this.router.navigate(['/', 'main']);\n      }\n      return throwError(err);\n    });\n  }\n}\n", "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  constructor() { }\n\n  setItem(key: string, value: any) {\n    localStorage.setItem(key, value);\n  }\n\n  getItem(key: string) {\n    try {\n      return JSON.parse(localStorage.getItem(key) || '');\n    } catch (error) {\n      return localStorage.getItem(key);\n    }\n  }\n\n  removeItem(key: string) {\n    localStorage.removeItem(key);\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { environment } from '@environments/environment';\nimport { lastValueFrom } from 'rxjs';\nimport { ShellEvents } from '@enums/shell.enum';\nimport { UserService } from '@services/user.service';\nimport { UuidData } from '@interfaces/uuid.interface';\nimport { LocalStorageKeys, LogKeys } from '@enums/global.enum';\nimport { ApiService } from '@services/api.service';\nimport { CoreService } from '@services/core.service';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UuidService {\n  private uuid = '';\n  private apiUuid = `${environment.api.host}${'/uuid'}`;\n\n  constructor(\n    private readonly apiSrv: ApiService,\n    private readonly userSrv: UserService,\n    private readonly coreSrv: CoreService\n  ) {\n    window.addEventListener(ShellEvents.SHELL_DEVICE_GET_ID_RESPONSE, async (event: any) => {\n      const localUuid = (localStorage.getItem(LocalStorageKeys.APP_UUID) || (event.detail?.response || ''));\n      this.setAppUuid(localUuid);\n      await this.onDeviceIdResponse();\n    });\n  }\n\n  public async init(): Promise<void> {\n    await this.requestDeviceId();\n  }\n\n  public getUuid(): string {\n    return this.uuid;\n  }\n\n  public updateAppUuid(newUuid: string): void {\n    this.setAppUuid(newUuid);\n  }\n\n  private async requestDeviceId(): Promise<void> {\n    if (this.coreSrv.hasShell()) {\n      window.dispatchEvent(new CustomEvent(ShellEvents.SHELL_DEVICE_GET_ID));\n    } else {\n      const localUuid = (localStorage.getItem(LocalStorageKeys.APP_UUID) || '');\n      this.setAppUuid(localUuid);\n      await this.onDeviceIdResponse();\n    }\n  }\n\n  private setAppUuid(newUuid: string): void {\n    this.uuid = newUuid;\n    if (!this.uuid) {\n      this.uuid = uuid();\n    }\n    localStorage.setItem(LocalStorageKeys.APP_UUID, this.uuid);\n  }\n\n\n  private async onDeviceIdResponse(): Promise<void> {\n    const uuidData = await this.getUuidData();\n    if (!uuidData) {\n      await this.registerUuid();\n    } else {\n      await this.userSrv.loginByUuid(this.uuid);\n      console.info(LogKeys.SYSTEM,`UUID ${this.uuid} was registered.`);\n    }\n  }\n\n  public async getUuidData(): Promise<UuidData | null> {\n    try {\n      const uuidData$ = this.apiSrv.get<UuidData>(`${this.apiUuid}/${this.uuid}`);\n      const uuidData: UuidData = await lastValueFrom(uuidData$)\n      return uuidData;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  private async registerUuid(): Promise<void> {\n    const userData = await this.userSrv.createUserByUuid(this.uuid)\n    const loginData = await this.userSrv.loginByUuid(this.uuid);\n    \n    if (loginData.token) {\n      const body = {\n        uuid: this.uuid,\n        user: userData._id\n      };\n\n      try {\n        const uuidData$ = this.apiSrv.post<UuidData>(this.apiUuid, body);\n        const uuidData = await lastValueFrom(uuidData$);\n        this.uuid = uuidData.uuid;\n        console.info(LogKeys.SYSTEM,`UUID ${this.uuid} has been registered.`);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n}\n", "import { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { lastValueFrom } from 'rxjs';\nimport { environment } from '@environments/environment';\nimport { UserData, LoginData } from '@interfaces/user.interface';\nimport { GlobalKeys, LocalStorageKeys, LogKeys } from '@enums/global.enum';\nimport { ApiService } from '@services/api.service';\nimport { StorageService } from '@services/storage.service';\nimport { TicketData } from '@interfaces/ticket.interface';\n\nconst TOKEN_EXPIRATION_TIME = 1000 * 60 * 60 * 1.5; // 1.5 hours\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUser = `${environment.api.host}${'/user'}`;\n\n  constructor(\n    private readonly apiSrv: ApiService,\n    private readonly storageSrv: StorageService,\n  ) {}\n\n  async createUserByUuid(uuid: string): Promise<UserData> {\n    const body = {\n      email: `${uuid}${GlobalKeys.UUID_EMAIL_DOMAIN}`,\n      password: uuid,\n      name: uuid\n    };\n\n    try {\n      const userData$ = this.apiSrv.post<UserData>(this.apiUser, body);\n      const userData = await lastValueFrom(userData$);\n      return userData;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async loginByUuid(uuid: string): Promise<LoginData> {\n    return await this.login(`${uuid}${GlobalKeys.UUID_EMAIL_DOMAIN}`, uuid);\n  }\n\n  public async login(email: string, password: string): Promise<LoginData> {\n    const body = {\n      email,\n      password\n    };\n\n    try {\n      const loginData$ = this.apiSrv.post<LoginData>(`${this.apiUser}/login`, body);\n      const loginData = await lastValueFrom(loginData$);\n      if (loginData.token) {\n        const tokenData = {\n          token: loginData.token,\n          date: Date.now()\n        }\n        this.storageSrv.setItem(LocalStorageKeys.TOKEN, JSON.stringify(tokenData));\n        console.info(LogKeys.SYSTEM, `${loginData.token}`);\n      }\n      return loginData;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async checkTokenExpiration(uuid: string) {\n    const currentTokenData = this.storageSrv.getItem(LocalStorageKeys.TOKEN);\n    const currentTokenDate = currentTokenData?.date || 0;\n    const currentDate = Date.now();\n    if (currentDate - currentTokenDate > TOKEN_EXPIRATION_TIME) {\n      await this.loginByUuid(uuid);\n    }\n  }\n\n  public async getAllTicketsByUser(): Promise<TicketData[] | []> {\n    try {\n      const userTicketsData$ = this.apiSrv.get<TicketData[]>(`${this.apiUser}/ticket/all?limit=100&offset=0`);\n      const userTicketsData: TicketData[] = await lastValueFrom(userTicketsData$)\n      return userTicketsData;\n    } catch (error) {\n      return [];\n    }\n  };\n}\n", "import { HttpClient, HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, delay, retry, throwError } from 'rxjs';\nimport { LocalStorageKeys } from '@enums/global.enum';\nimport { Router } from '@angular/router';\nimport { StorageService } from './storage.service';\nimport { ShellActions } from '../enums/shell.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoreService {\n\n  constructor(\n    private readonly storageSrv: StorageService,\n  ) {}\n\n  public hasShell(): boolean {\n    const remoteVersion = '0.0.0';\n    const shellVersion = this.storageSrv.getItem(ShellActions.SHELL_VERSION);\n    if (shellVersion === remoteVersion) {\n      return true;\n    }\n    return false;\n  }\n}", "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { IonTabs } from '@ionic/angular/common';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-main',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    IonicModule,\n    TranslateModule\n  ],\n  templateUrl: './main.component.html',\n  styleUrl: './main.component.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MainComponent implements OnInit {\n  @ViewChild('mainTabs') mainTabs!: IonTabs;\n\n  constructor(\n    private readonly router: Router\n  ) {}\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.mainTabs.select('games');\n    }, 500);\n  }\n}\n", "<ion-tabs #mainTabs>\n  <ion-tab-bar slot=\"bottom\">\n    <ion-tab-button tab=\"games\">\n      <ion-icon name=\"grid-outline\"></ion-icon>\n      <span>{{ \"MAIN.TABS.GAMES\" | translate }}</span>\n    </ion-tab-button>\n    <ion-tab-button tab=\"scan\">\n      <ion-icon name=\"scan-outline\"></ion-icon>\n      <span>{{ \"MAIN.TABS.SCAN_NOW\" | translate }}</span>\n    </ion-tab-button>\n    <ion-tab-button tab=\"tickets\">\n      <ion-icon name=\"wallet-outline\"></ion-icon>\n      <span>{{ \"MAIN.TABS.TICKETS\" | translate }}</span>\n    </ion-tab-button>\n    <ion-tab-button tab=\"menu\">\n      <ion-icon name=\"cog-outline\"></ion-icon>\n      <span>{{ \"MAIN.TABS.MENU\" | translate }}</span>\n    </ion-tab-button>\n  </ion-tab-bar>\n</ion-tabs>", "import { CommonModule } from '@angular/common';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { NavigationEnd, Router, RouterModule } from '@angular/router';\nimport { filter } from 'rxjs';\nimport { IonicModule } from '@ionic/angular';\nimport { UuidService } from '@services/uuid.service';\nimport { UserService } from '@services/user.service';\nimport { ApiService } from '@services/api.service';\nimport { TicketService } from '@services/ticket.service';\nimport { StorageService } from '@services/storage.service';\nimport { ShellErrors } from '@enums/shell.enum';\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { CustomTranslateLoader } from '@utils/custom-translate-loader';\nimport { GameService } from '@services/game.service';\n\n@Component({\n  selector: 'app-remote-app',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    IonicModule,\n    HttpClientModule,\n  ],\n  providers: [\n    ApiService,\n    UuidService,\n    UserService,\n    TicketService,\n    GameService,\n    TranslateModule.forRoot({\n      loader: {\n          provide: TranslateLoader,\n          useClass: CustomTranslateLoader,\n          deps: [HttpClient]\n      }\n    }).providers!\n  ],\n  templateUrl: './remote-app.component.html',\n  styleUrl: './remote-app.component.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class RemoteAppComponent implements OnInit {\n  \n  constructor(\n    private translateSrv: TranslateService,\n    private readonly uuidSrv: UuidService,\n    private readonly userSrv: UserService,\n    private readonly storageSrv: StorageService,\n    private readonly router: Router,\n  ) {\n    this.translateSrv.setDefaultLang('en');\n    this.translateSrv.use('en');\n  }\n\n  ngOnInit(): void {\n    this.setNoErrorLoadingRemote();\n    // Import external styles and scripts for shell\n    this.importStyles();\n    this.importScripts();\n    // Init uuid and register device logic\n    this.uuidSrv.init();\n    // Refresh token on navigation\n    this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd)\n    ).subscribe((event) => {\n      const uuid = this.uuidSrv.getUuid();\n      if (uuid) {\n        this.userSrv.checkTokenExpiration(uuid);\n      } else {\n        this.uuidSrv.init();\n      }\n    });\n  }\n\n  /*\n  Shell logic\n  */\n\n  private setNoErrorLoadingRemote() {\n    this.storageSrv.setItem(ShellErrors.SHELL_LOADING_REMOTE_OK, true);\n  }\n\n  private importScripts() {\n    const scripts = [\n      'https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic/ionic.esm.js',\n      'https://cdn.jsdelivr.net/npm/ionicons/dist/ionicons/ionicons.esm.js'\n    ]\n\n    const head = document.head;\n\n    scripts.forEach(script => {\n      const scriptEl = document.createElement('script');\n      scriptEl.type = 'module';\n      scriptEl.src = script;\n      scriptEl.async = false;\n      document.head.appendChild(scriptEl);\n      head.insertBefore(scriptEl, head.firstElementChild);\n    });\n  }\n\n  private importStyles() {\n    const styles = [\n      'https://cdn.jsdelivr.net/npm/@ionic/core/css/ionic.bundle.css',\n    ]\n\n    const head = document.head;\n\n    styles.forEach(style => {\n      const linkEl = document.createElement('link');\n      linkEl.rel = 'stylesheet';\n      linkEl.href = style;\n      head.insertBefore(linkEl, head.firstElementChild);\n    });\n  }\n}\n", "<router-outlet></router-outlet>", "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { environment } from '@environments/environment';\n\n\n@Injectable()\nexport class CustomTranslateLoader implements TranslateLoader  {\n\n    constructor(private httpClient: HttpClient) {}\n    getTranslation(lang: string): Observable<any> {\n      const apiAddress = environment.web.host + `/assets/i18n/${lang}.json`;\n      return this.httpClient.get(apiAddress)\n      .pipe(\n        catchError((error) => {\n          console.log('Error loading translation file', error);\n          return this.httpClient.get(environment.web.host + `/assets/i18n/es.json`)\n        })\n      );\n    }\n}", "import { Injectable } from '@angular/core';\nimport { ApiService } from '@services/api.service';\nimport { environment } from '@environments/environment';\nimport { lastValueFrom } from 'rxjs';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { GameTicketPrizeData } from '@interfaces/game.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n  private apiGame = `${environment.api.host}${'/game'}`;\n\n  constructor(\n    private readonly apiSrv: ApiService,\n  ) {}\n\n  public async getAllTicketsPrizesByUser(): Promise<GameTicketPrizeData[] | []> {\n    try {\n      const userTicketsPrizeData$ = this.apiSrv.get<GameTicketPrizeData[]>(`${this.apiGame}/ticket/all?limit=100&offset=0`);\n      const userTicketsPrizeData: GameTicketPrizeData[] = await lastValueFrom(userTicketsPrizeData$)\n      return userTicketsPrizeData;\n    } catch (error) {\n      return [];\n    }\n  };\n}\n", "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterModule } from '@angular/router';\nimport { IonicModule, LoadingController } from '@ionic/angular';\nimport { UserService } from '@services/user.service';\nimport { TicketData } from '@interfaces/ticket.interface';\nimport { HeaderComponent } from '@components/remote-app/components/header/header.component';\nimport { environment } from '@environments/environment';\nimport { CustomDatePipe } from '@pipes/custom-date.pipe';\nimport { TicketService } from '@services/ticket.service';\nimport { GameService } from '@services/game.service';\nimport { GameTicketPrizeData } from '@interfaces/game.interface';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-tickets',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    IonicModule,\n    HeaderComponent,\n    CustomDatePipe\n  ],\n  templateUrl: './tickets.component.html',\n  styleUrl: './tickets.component.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TicketsComponent implements OnInit{\n  public tickets: GameTicketPrizeData[] = [];\n  public environment = environment;\n\n  constructor(\n    private readonly cdr: ChangeDetectorRef,\n    private readonly ticketSrv: TicketService,\n    private readonly gameSrv: GameService,\n    private readonly loadingCtrl: LoadingController,\n    private readonly translateSrv: TranslateService\n  ) {}\n\n  ngOnInit(): void {\n    // document.querySelector('app-tickets')?.classList.remove('ion-page-invisible');\n  }\n\n  async ionViewDidEnter(): Promise<void> {\n    await this.getUserTickets();\n    this.sortTicketsByDate();\n  }\n\n  public sortTicketsByDate(): void {\n    this.tickets.sort((a, b) => {\n      const dateA = new Date(a.ticket.date!);\n      const dateB = new Date(b.ticket.date!);\n      return dateB.getTime() - dateA.getTime();\n    });\n\n    this.cdr.detectChanges();\n  }\n\n  public async deleteTicketById(id: string): Promise<void> {\n    await this.ticketSrv.deleteTicketById(id, true);\n    await this.getUserTickets();\n  }\n\n  private async getUserTickets(): Promise<void> {\n    await this.showLoading();\n    try {\n      this.tickets = await this.gameSrv.getAllTicketsPrizesByUser();\n      this.cdr.detectChanges();\n      console.log(this.tickets);\n    } catch (error) {\n      console.log(error);\n    }\n    await this.dismissLoading();\n  }\n\n  private async showLoading() {\n    const loading = await this.loadingCtrl.create({\n      message: this.translateSrv.instant('TICKETS.LOADING_TICKETS'),\n    });\n\n    loading.present();\n  }\n\n  private async dismissLoading() {\n    await this.loadingCtrl.dismiss();\n  }\n}\n", "<app-header></app-header>\n<ion-content padding color=\"light\">\n    <ion-list class=\"ticket-list\">\n        @for (item of tickets; track item.ticket._id) {\n        <ion-item-sliding>\n            <ion-item [button]=\"true\" class=\"ticket-item\">\n                <ion-label class=\"ticket-item-text\">\n                    <ion-note color=\"medium\">{{ item.ticket.date | date | async }}</ion-note>\n                    <section class=\"game-item-data\">\n                        <ion-img class=\"game-item-img\"\n                            aria-hidden=\"true\" slot=\"start\" alt=\"\" \n                            [src]=\"environment.web.host + '/assets/logos/games/' + item.ticket.code + '.png'\"></ion-img>\n                        <strong class=\"game-item-data-number\">{{ item.ticket.data.info.number }}</strong>\n                        <span class=\"game-item-prize\">{{ item.prize.quantity / 100 | currency:'EUR'}}</span> <!-- TODO: Hacer currency con javascript y evento, similar a pipe date-->\n                    </section>\n                </ion-label>\n            </ion-item>\n            <ion-item-options slot=\"end\">\n                <ion-item-option color=\"danger\" expandable=\"true\" (click)=\"deleteTicketById(item.ticket._id || '')\">\n                    <ion-icon slot=\"icon-only\" name=\"trash\"></ion-icon>\n                </ion-item-option>\n            </ion-item-options>\n        </ion-item-sliding>\n        } @empty {\n            <p>Empty list of tickets</p>\n        }\n    </ion-list>\n</ion-content>\n", "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderComponent {\n  @Input() public showMenu: boolean = true;\n\n  constructor(\n    private readonly router: Router,\n    private readonly cdr: ChangeDetectorRef,\n    private translateSrv: TranslateService\n  ) {}\n\n  public changeLanguage(lang: string): void {\n    this.translateSrv.use(lang);\n    this.cdr.detectChanges();\n  }\n\n  public openMenu(): void {\n    this.router.navigate(['/main/', 'menu']);\n  }\n}\n", "<ion-header>\n    <ion-toolbar color=\"primary\">\n        <ion-title>Lookttery</ion-title>\n        <ion-buttons slot=\"end\">\n            <ion-button *ngIf=\"showMenu\" (click)=\"openMenu()\">MENU</ion-button>\n        </ion-buttons>\n    </ion-toolbar>\n</ion-header>", "import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\n@Pipe({\n  name: 'date',\n  standalone: true,\n})\nexport class CustomDatePipe implements PipeTransform {\n \n  constructor(private translateService: TranslateService) {\n  }\n \n  public transform(value: any): Observable<string> {\n    const date = new Date(value);\n    const options: Intl.DateTimeFormatOptions = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n\n    let finalValue = date.toLocaleDateString(this.translateService.currentLang, options);\n\n    const finalValue$ = new BehaviorSubject(finalValue);\n    \n    this.translateService.onLangChange.subscribe(() => {\n      finalValue = date.toLocaleDateString(this.translateService.currentLang, options);\n      return finalValue$.next(finalValue);\n    });\n\n    return finalValue$;\n  }\n}", "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { HeaderComponent } from '@components/remote-app/components/header/header.component';\nimport { QrCodeModule } from 'ng-qrcode';\nimport { UuidService } from '@services/uuid.service';\nimport { RouterModule } from '@angular/router';\nimport { GlobalKeys } from '@enums/global.enum';\n\n@Component({\n  selector: 'app-menu',\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule,\n    RouterModule,\n    QrCodeModule,\n    HeaderComponent,\n  ],\n  templateUrl: './menu.component.html',\n  styleUrl: './menu.component.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuComponent {\n  public qrUuid = 'aaa';\n\n  constructor(\n    private readonly cdr: ChangeDetectorRef,\n    private readonly uuidSrv: UuidService,\n  ) {}\n\n  ionViewDidEnter(): void {\n    this.qrUuid = GlobalKeys.UUID_QR_CODE + this.uuidSrv.getUuid();\n    this.cdr.detectChanges();\n  }\n}\n", "<app-header [showMenu]=\"false\"></app-header>\n<ion-content padding color=\"light\">\n    <ion-list class=\"menu-list\">\n        <section class=\"menu-list-qr\">\n            <qr-code *ngIf=\"qrUuid\" [value]=\"qrUuid\" size=\"300\" errorCorrectionLevel=\"M\"></qr-code>\n            <!-- <h3>{{ qrUuid }}</h3> -->\n        </section>\n    </ion-list>\n</ion-content>", "import { Routes } from '@angular/router';\nimport { ScanComponent } from './components/remote-app/pages/scan/scan.component';\nimport { MainComponent } from './components/remote-app/pages/main/main.component';\nimport { RemoteAppComponent } from './components/remote-app/remote-app.component';\nimport { TicketsComponent } from './components/remote-app/pages/tickets/tickets.component';\nimport { MenuComponent } from './components/remote-app/pages/menu/menu.component';\n\nexport const routes: Routes = [\n    {\n        path: '',\n        component: RemoteAppComponent,\n        children: [\n            {\n                path: '',\n                redirectTo: 'main',\n                pathMatch: 'full'\n            },\n            {\n                path: 'main',\n                component: MainComponent,\n                children: [\n                    {\n                        path: 'scan',\n                        component: ScanComponent    \n                    },\n                    {\n                        path: 'tickets',\n                        component: TicketsComponent\n                    },\n                    {\n                        path: 'menu',\n                        component: MenuComponent\n                    }\n                ]\n            }\n        ]\n    }\n];\n\n", "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'lookttery-app';\n}\n", "<router-outlet></router-outlet>"],
  "mappings": "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",
  "names": ["ShellActions", "ShellEvents", "ShellErrors", "LocalStorageKeys", "LogKeys", "GlobalKeys", "GameCodes", "AlertCodes", "Injectable", "Injectable", "HttpApiErrors", "Injectable", "lastValueFrom", "Injectable", "lastValueFrom", "uuid", "lastValueFrom", "Injectable", "lastValueFrom", "uuid", "CommonModule", "ChangeDetectionStrategy", "Component", "RouterModule", "IonicModule", "CommonModule", "HttpClient", "ChangeDetectionStrategy", "Component", "RouterModule", "IonicModule", "TranslateModule", "Injectable", "catchError", "catchError", "Injectable", "lastValueFrom", "lastValueFrom", "uuid", "TranslateModule", "HttpClient", "CommonModule", "RouterModule", "IonicModule", "CommonModule", "ChangeDetectionStrategy", "Component", "RouterModule", "IonicModule", "CommonModule", "ChangeDetectionStrategy", "Component", "IonicModule", "CommonModule", "RouterModule", "IonicModule", "CommonModule", "ChangeDetectionStrategy", "Component", "IonicModule", "RouterModule", "CommonModule", "IonicModule", "RouterModule", "Component", "CommonModule", "RouterModule"]
}
