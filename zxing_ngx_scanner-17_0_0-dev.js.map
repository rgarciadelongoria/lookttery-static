{
  "version": 3,
  "sources": ["../../@zxing/ngx-scanner/fesm2022/zxing-ngx-scanner.mjs"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserMultiFormatReader, BrowserCodeReader } from '@zxing/browser';\nimport { NotFoundException, ChecksumException, FormatException, DecodeHintType, BarcodeFormat } from '@zxing/library';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Based on zxing-typescript BrowserCodeReader\n */\nconst _c0 = [\"preview\"];\nclass BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\n  /**\n   * Returns the code reader scanner controls.\n   */\n  getScannerControls() {\n    if (!this.scannerControls) {\n      throw new Error('No scanning is running at the time.');\n    }\n    return this.scannerControls;\n  }\n  /**\n   * Starts the decoding from the current or a new video element.\n   *\n   * @param deviceId The device's to be used Id\n   * @param previewEl A new video element\n   */\n  async scanFromDeviceObservable(deviceId, previewEl) {\n    const scan$ = new BehaviorSubject({});\n    let ctrls;\n    try {\n      ctrls = await this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {\n        if (!error) {\n          scan$.next({\n            result\n          });\n          return;\n        }\n        const errorName = error.name;\n        // stream cannot stop on fails.\n        if (\n        // scan Failure - found nothing, no error\n        errorName === NotFoundException.name ||\n        // scan Error - found the QR but got error on decoding\n        errorName === ChecksumException.name || errorName === FormatException.name || error.message.includes('No MultiFormat Readers were able to detect the code.')) {\n          scan$.next({\n            error\n          });\n          return;\n        }\n        // probably fatal error\n        scan$.error(error);\n        this.scannerControls.stop();\n        this.scannerControls = undefined;\n        return;\n      });\n      this.scannerControls = {\n        ...ctrls,\n        stop() {\n          ctrls.stop();\n          scan$.complete();\n        }\n      };\n    } catch (e) {\n      scan$.error(e);\n      this.scannerControls?.stop();\n      this.scannerControls = undefined;\n    }\n    return scan$.asObservable();\n  }\n}\nclass ZXingScannerComponent {\n  /**\n   * Exposes the current code reader, so the user can use it's APIs.\n   */\n  get codeReader() {\n    return this._codeReader;\n  }\n  /**\n   * User device input\n   */\n  set device(device) {\n    if (!this._ready) {\n      this._devicePreStart = device;\n      // let's ignore silently, users don't like logs\n      return;\n    }\n    if (this.isAutostarting) {\n      // do not allow setting devices during auto-start, since it will set one and emit it.\n      console.warn('Avoid setting a device during auto-start.');\n      return;\n    }\n    if (this.isCurrentDevice(device)) {\n      console.warn('Setting the same device is not allowed.');\n      return;\n    }\n    if (!this.hasPermission) {\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\n      // this.permissionResponse\n      //   .pipe(\n      //     take(1),\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\n      //   )\n      //   .subscribe(() => this.device = device);\n      return;\n    }\n    this.setDevice(device);\n  }\n  /**\n   * User device accessor.\n   */\n  get device() {\n    return this._device;\n  }\n  /**\n   * Returns all the registered formats.\n   */\n  get formats() {\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\n  }\n  /**\n   * Registers formats the scanner should support.\n   *\n   * @param input BarcodeFormat or case-insensitive string array.\n   */\n  set formats(input) {\n    if (typeof input === 'string') {\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\n    }\n    // formats may be set from html template as BarcodeFormat or string array\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\n    const hints = this.hints;\n    // updates the hints\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n    // handles updating the codeReader\n    this.hints = hints;\n  }\n  /**\n   * Returns all the registered hints.\n   */\n  get hints() {\n    return this._hints;\n  }\n  /**\n   * Does what it takes to set the hints.\n   */\n  set hints(hints) {\n    this._hints = hints;\n    // new instance with new hints.\n    this.codeReader?.setHints(this._hints);\n  }\n  /**\n   * Sets the desired constraints in all video tracks.\n   * @experimental\n   */\n  set videoConstraints(constraints) {\n    // new instance with new hints.\n    const controls = this.codeReader?.getScannerControls();\n    if (!controls) {\n      // fails silently\n      return;\n    }\n    controls?.streamVideoConstraintsApply(constraints);\n  }\n  /**\n   *\n   */\n  set isAutostarting(state) {\n    this._isAutostarting = state;\n    this.autostarting.next(state);\n  }\n  /**\n   *\n   */\n  get isAutostarting() {\n    return this._isAutostarting;\n  }\n  /**\n   * Can turn on/off the device flashlight.\n   *\n   * @experimental Torch/Flash APIs are not stable in all browsers, it may be buggy!\n   */\n  set torch(onOff) {\n    try {\n      const controls = this.getCodeReader().getScannerControls();\n      controls.switchTorch(onOff);\n    } catch (error) {\n      // ignore error\n    }\n  }\n  /**\n   * Starts and Stops the scanning.\n   */\n  set enable(enabled) {\n    this._enabled = Boolean(enabled);\n    if (!this._enabled) {\n      this.reset();\n      BrowserMultiFormatContinuousReader.releaseAllStreams();\n    } else {\n      if (this.device) {\n        this.scanFromDevice(this.device.deviceId);\n      } else {\n        this.init();\n      }\n    }\n  }\n  /**\n   * Tells if the scanner is enabled or not.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * If is `tryHarder` enabled.\n   */\n  get tryHarder() {\n    return this.hints.get(DecodeHintType.TRY_HARDER);\n  }\n  /**\n   * Enable/disable tryHarder hint.\n   */\n  set tryHarder(enable) {\n    const hints = this.hints;\n    if (enable) {\n      hints.set(DecodeHintType.TRY_HARDER, true);\n    } else {\n      hints.delete(DecodeHintType.TRY_HARDER);\n    }\n    this.hints = hints;\n  }\n  /**\n   * Constructor to build the object and do some DI.\n   */\n  constructor() {\n    /**\n     * Delay between attempts to decode (default is 500ms)\n     */\n    this.timeBetweenScans = 500;\n    /**\n     * Delay between successful decode (default is 500ms)\n     */\n    this.delayBetweenScanSuccess = 500;\n    /**\n     * How the preview element should be fit inside the :host container.\n     */\n    this.previewFitMode = 'cover';\n    /**\n     * Url of the HTML video poster\n     */\n    this.poster = '';\n    this._ready = false;\n    // instance based emitters\n    this.autostarted = new EventEmitter();\n    this.autostarting = new EventEmitter();\n    this.torchCompatible = new EventEmitter(false);\n    this.scanSuccess = new EventEmitter();\n    this.scanFailure = new EventEmitter();\n    this.scanError = new EventEmitter();\n    this.scanComplete = new EventEmitter();\n    this.camerasFound = new EventEmitter();\n    this.camerasNotFound = new EventEmitter();\n    this.permissionResponse = new EventEmitter(true);\n    this.hasDevices = new EventEmitter();\n    this.deviceChange = new EventEmitter();\n    this._enabled = true;\n    this._hints = new Map();\n    this.autofocusEnabled = true;\n    this.autostart = true;\n    this.formats = [BarcodeFormat.QR_CODE];\n    // computed data\n    this.hasNavigator = typeof navigator !== 'undefined';\n    this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;\n  }\n  /**\n   * Gets and registers all cameras.\n   */\n  async askForPermission() {\n    if (!this.hasNavigator) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n    if (!this.isMediaDevicesSupported) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n    let stream;\n    let permission;\n    try {\n      // Will try to ask for permission\n      stream = await this.getAnyVideoDevice();\n      permission = !!stream;\n    } catch (err) {\n      return this.handlePermissionException(err);\n    } finally {\n      this.terminateStream(stream);\n    }\n    this.setPermission(permission);\n    // Returns the permission\n    return permission;\n  }\n  /**\n   *\n   */\n  getAnyVideoDevice() {\n    return navigator.mediaDevices.getUserMedia({\n      video: true\n    });\n  }\n  /**\n   * Terminates a stream and it's tracks.\n   */\n  terminateStream(stream) {\n    if (stream) {\n      stream.getTracks().forEach(t => t.stop());\n    }\n    stream = undefined;\n  }\n  async init() {\n    if (!this.autostart) {\n      console.warn('Feature \\'autostart\\' disabled. Permissions and devices recovery has to be run manually.');\n      // does the necessary configuration without autostarting\n      this.initAutostartOff();\n      this._ready = true;\n      return;\n    }\n    // configures the component and starts the scanner\n    await this.initAutostartOn();\n    this._ready = true;\n  }\n  /**\n   * Initializes the component without starting the scanner.\n   */\n  initAutostartOff() {\n    // do not ask for permission when autostart is off\n    this.isAutostarting = false;\n    // just update devices information\n    this.updateVideoInputDevices();\n    if (this._device && this._devicePreStart) {\n      this.setDevice(this._devicePreStart);\n    }\n  }\n  /**\n   * Initializes the component and starts the scanner.\n   * Permissions are asked to accomplish that.\n   */\n  async initAutostartOn() {\n    this.isAutostarting = true;\n    let hasPermission;\n    try {\n      // Asks for permission before enumerating devices so it can get all the device's info\n      hasPermission = await this.askForPermission();\n    } catch (e) {\n      console.error('Exception occurred while asking for permission:', e);\n      return;\n    }\n    // from this point, things gonna need permissions\n    if (hasPermission) {\n      const devices = await this.updateVideoInputDevices();\n      await this.autostartScanner([...devices]);\n    }\n    this.isAutostarting = false;\n    this.autostarted.next();\n  }\n  /**\n   * Checks if the given device is the current defined one.\n   */\n  isCurrentDevice(device) {\n    return device?.deviceId === this._device?.deviceId;\n  }\n  /**\n   * Executes some actions before destroy the component.\n   */\n  ngOnDestroy() {\n    this.reset();\n    BrowserMultiFormatContinuousReader.releaseAllStreams();\n  }\n  /**\n   *\n   */\n  ngOnInit() {\n    this.init();\n  }\n  /**\n   * Stops the scanning, if any.\n   */\n  scanStop() {\n    if (this._scanSubscription) {\n      this.codeReader?.getScannerControls().stop();\n      this._scanSubscription?.unsubscribe();\n      this._scanSubscription = undefined;\n    }\n    this.torchCompatible.next(false);\n  }\n  /**\n   * Stops the scanning, if any.\n   */\n  scanStart() {\n    if (this._scanSubscription) {\n      throw new Error('There is already a scan process running.');\n    }\n    if (!this._device) {\n      throw new Error('No device defined, cannot start scan, please define a device.');\n    }\n    this.scanFromDevice(this._device.deviceId);\n  }\n  /**\n   * Stops old `codeReader` and starts scanning in a new one.\n   */\n  restart() {\n    // note only necessary for now because of the Torch\n    this._codeReader = undefined;\n    const prevDevice = this._reset();\n    if (!prevDevice) {\n      return;\n    }\n    this.device = prevDevice;\n  }\n  /**\n   * Discovers and updates known video input devices.\n   */\n  async updateVideoInputDevices() {\n    // permissions aren't needed to get devices, but to access them and their info\n    const devices = (await BrowserCodeReader.listVideoInputDevices()) || [];\n    const hasDevices = devices && devices.length > 0;\n    // stores discovered devices and updates information\n    this.hasDevices.next(hasDevices);\n    this.camerasFound.next([...devices]);\n    if (!hasDevices) {\n      this.camerasNotFound.next(null);\n    }\n    return devices;\n  }\n  /**\n   * Starts the scanner with the back camera otherwise take the last\n   * available device.\n   */\n  async autostartScanner(devices) {\n    const matcher = ({\n      label\n    }) => /back|tr\u00E1s|rear|traseira|environment|ambiente/gi.test(label);\n    // select the rear camera by default, otherwise take the last camera.\n    const device = devices.find(matcher) || devices.pop();\n    if (!device) {\n      throw new Error('Impossible to autostart, no input devices available.');\n    }\n    await this.setDevice(device);\n    this.deviceChange.next(device);\n  }\n  /**\n   * Dispatches the scan success event.\n   *\n   * @param result the scan result.\n   */\n  dispatchScanSuccess(result) {\n    this.scanSuccess.next(result.getText());\n  }\n  /**\n   * Dispatches the scan failure event.\n   */\n  dispatchScanFailure(reason) {\n    this.scanFailure.next(reason);\n  }\n  /**\n   * Dispatches the scan error event.\n   *\n   * @param error the error thing.\n   */\n  dispatchScanError(error) {\n    if (!this.scanError.observed) {\n      console.error(`zxing scanner component: ${error.name}`, error);\n      console.warn('Use the `(scanError)` property to handle errors like this!');\n    }\n    this.scanError.next(error);\n  }\n  /**\n   * Dispatches the scan event.\n   *\n   * @param result the scan result.\n   */\n  dispatchScanComplete(result) {\n    this.scanComplete.next(result);\n  }\n  /**\n   * Returns the filtered permission.\n   */\n  handlePermissionException(err) {\n    // failed to grant permission to video input\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\n    let permission;\n    switch (err.name) {\n      // usually caused by not secure origins\n      case 'NotSupportedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // could not claim\n        permission = null;\n        // can't check devices\n        this.hasDevices.next(null);\n        break;\n      // user denied permission\n      case 'NotAllowedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // claimed and denied permission\n        permission = false;\n        // this means that input devices exists\n        this.hasDevices.next(true);\n        break;\n      // the device has no attached input devices\n      case 'NotFoundError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // no permissions claimed\n        permission = null;\n        // because there was no devices\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n      case 'NotReadableError':\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\n        // no permissions claimed\n        permission = null;\n        // there are devices, which I couldn't use\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n      default:\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\n        // unknown\n        permission = null;\n        // this.hasDevices.next(undefined;\n        break;\n    }\n    this.setPermission(permission);\n    // tells the listener about the error\n    this.permissionResponse.error(err);\n    return permission;\n  }\n  /**\n   * Returns a valid BarcodeFormat or fails.\n   */\n  getBarcodeFormatOrFail(format) {\n    return typeof format === 'string' ? BarcodeFormat[format.trim().toUpperCase()] : format;\n  }\n  /**\n   * Return a code reader, create one if non exist\n   */\n  getCodeReader() {\n    if (!this._codeReader) {\n      const options = {\n        delayBetweenScanAttempts: this.timeBetweenScans,\n        delayBetweenScanSuccess: this.delayBetweenScanSuccess\n      };\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, options);\n    }\n    return this._codeReader;\n  }\n  /**\n   * Starts the continuous scanning for the given device.\n   *\n   * @param deviceId The deviceId from the device.\n   */\n  async scanFromDevice(deviceId) {\n    const videoElement = this.previewElemRef.nativeElement;\n    const codeReader = this.getCodeReader();\n    const scanStream = await codeReader.scanFromDeviceObservable(deviceId, videoElement);\n    if (!scanStream) {\n      throw new Error('Undefined decoding stream, aborting.');\n    }\n    const next = x => this._onDecodeResult(x.result, x.error);\n    const error = err => this._onDecodeError(err);\n    const complete = () => {};\n    this._scanSubscription = scanStream.subscribe(next, error, complete);\n    if (this._scanSubscription.closed) {\n      return;\n    }\n    const controls = codeReader.getScannerControls();\n    const hasTorchControl = typeof controls.switchTorch !== 'undefined';\n    this.torchCompatible.next(hasTorchControl);\n  }\n  /**\n   * Handles decode errors.\n   */\n  _onDecodeError(err) {\n    this.dispatchScanError(err);\n    // this.reset();\n  }\n  /**\n   * Handles decode results.\n   */\n  _onDecodeResult(result, error) {\n    if (result) {\n      this.dispatchScanSuccess(result);\n    } else {\n      this.dispatchScanFailure(error);\n    }\n    this.dispatchScanComplete(result);\n  }\n  /**\n   * Stops the code reader and returns the previous selected device.\n   */\n  _reset() {\n    if (!this._codeReader) {\n      return;\n    }\n    // clearing codeReader first to prevent setOptions error appearing in several Chromium versions\n    this._codeReader = undefined;\n    const device = this._device;\n    // do not set this.device inside this method, it would create a recursive loop\n    this.device = undefined;\n    return device;\n  }\n  /**\n   * Resets the scanner and emits device change.\n   */\n  reset() {\n    this._reset();\n    this.deviceChange.emit(null);\n  }\n  /**\n   * Sets the current device.\n   */\n  async setDevice(device) {\n    // instantly stops the scan before changing devices\n    this.scanStop();\n    // correctly sets the new (or none) device\n    this._device = device || undefined;\n    if (!this._device) {\n      // cleans the video because user removed the device\n      BrowserCodeReader.cleanVideoSource(this.previewElemRef.nativeElement);\n    }\n    // if enabled, starts scanning\n    if (this._enabled && device) {\n      await this.scanFromDevice(device.deviceId);\n    }\n  }\n  /**\n   * Sets the permission value and emits the event.\n   */\n  setPermission(hasPermission) {\n    this.hasPermission = hasPermission;\n    this.permissionResponse.next(hasPermission);\n  }\n  static {\n    this.\u0275fac = function ZXingScannerComponent_Factory(t) {\n      return new (t || ZXingScannerComponent)();\n    };\n  }\n  static {\n    this.\u0275cmp = /* @__PURE__ */i0.\u0275\u0275defineComponent({\n      type: ZXingScannerComponent,\n      selectors: [[\"zxing-scanner\"]],\n      viewQuery: function ZXingScannerComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.\u0275\u0275viewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.\u0275\u0275queryRefresh(_t = i0.\u0275\u0275loadQuery()) && (ctx.previewElemRef = _t.first);\n        }\n      },\n      inputs: {\n        autofocusEnabled: \"autofocusEnabled\",\n        timeBetweenScans: \"timeBetweenScans\",\n        delayBetweenScanSuccess: \"delayBetweenScanSuccess\",\n        autostart: \"autostart\",\n        previewFitMode: \"previewFitMode\",\n        poster: \"poster\",\n        device: \"device\",\n        formats: \"formats\",\n        videoConstraints: \"videoConstraints\",\n        torch: \"torch\",\n        enable: \"enable\",\n        tryHarder: \"tryHarder\"\n      },\n      outputs: {\n        autostarted: \"autostarted\",\n        autostarting: \"autostarting\",\n        torchCompatible: \"torchCompatible\",\n        scanSuccess: \"scanSuccess\",\n        scanFailure: \"scanFailure\",\n        scanError: \"scanError\",\n        scanComplete: \"scanComplete\",\n        camerasFound: \"camerasFound\",\n        camerasNotFound: \"camerasNotFound\",\n        permissionResponse: \"permissionResponse\",\n        hasDevices: \"hasDevices\",\n        deviceChange: \"deviceChange\"\n      },\n      decls: 6,\n      vars: 3,\n      consts: [[3, \"poster\"], [\"preview\", \"\"]],\n      template: function ZXingScannerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.\u0275\u0275elementStart(0, \"video\", 0, 1)(2, \"p\");\n          i0.\u0275\u0275text(3, \" Your browser does not support this feature, please try to upgrade it. \");\n          i0.\u0275\u0275elementEnd();\n          i0.\u0275\u0275elementStart(4, \"p\");\n          i0.\u0275\u0275text(5, \" Seu navegador n\\xE3o suporta este recurso, por favor tente atualiz\\xE1-lo. \");\n          i0.\u0275\u0275elementEnd()();\n        }\n        if (rf & 2) {\n          i0.\u0275\u0275styleProp(\"object-fit\", ctx.previewFitMode);\n          i0.\u0275\u0275property(\"poster\", ctx.poster, i0.\u0275\u0275sanitizeUrl);\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{display:block}video[_ngcontent-%COMP%]{width:100%;height:auto;object-fit:contain}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.\u0275setClassMetadata(ZXingScannerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'zxing-scanner',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<video #preview [style.object-fit]=\\\"previewFitMode\\\" [poster]=\\\"poster\\\">\\n  <p>\\n    Your browser does not support this feature, please try to upgrade it.\\n  </p>\\n  <p>\\n    Seu navegador n\\u00E3o suporta este recurso, por favor tente atualiz\\u00E1-lo.\\n  </p>\\n</video>\\n\",\n      styles: [\":host{display:block}video{width:100%;height:auto;object-fit:contain}\\n\"]\n    }]\n  }], () => [], {\n    previewElemRef: [{\n      type: ViewChild,\n      args: ['preview', {\n        static: true\n      }]\n    }],\n    autofocusEnabled: [{\n      type: Input\n    }],\n    timeBetweenScans: [{\n      type: Input\n    }],\n    delayBetweenScanSuccess: [{\n      type: Input\n    }],\n    autostarted: [{\n      type: Output\n    }],\n    autostarting: [{\n      type: Output\n    }],\n    autostart: [{\n      type: Input\n    }],\n    previewFitMode: [{\n      type: Input\n    }],\n    poster: [{\n      type: Input\n    }],\n    torchCompatible: [{\n      type: Output\n    }],\n    scanSuccess: [{\n      type: Output\n    }],\n    scanFailure: [{\n      type: Output\n    }],\n    scanError: [{\n      type: Output\n    }],\n    scanComplete: [{\n      type: Output\n    }],\n    camerasFound: [{\n      type: Output\n    }],\n    camerasNotFound: [{\n      type: Output\n    }],\n    permissionResponse: [{\n      type: Output\n    }],\n    hasDevices: [{\n      type: Output\n    }],\n    device: [{\n      type: Input\n    }],\n    deviceChange: [{\n      type: Output\n    }],\n    formats: [{\n      type: Input\n    }],\n    videoConstraints: [{\n      type: Input\n    }],\n    torch: [{\n      type: Input\n    }],\n    enable: [{\n      type: Input\n    }],\n    tryHarder: [{\n      type: Input\n    }]\n  });\n})();\nclass ZXingScannerModule {\n  static {\n    this.\u0275fac = function ZXingScannerModule_Factory(t) {\n      return new (t || ZXingScannerModule)();\n    };\n  }\n  static {\n    this.\u0275mod = /* @__PURE__ */i0.\u0275\u0275defineNgModule({\n      type: ZXingScannerModule\n    });\n  }\n  static {\n    this.\u0275inj = /* @__PURE__ */i0.\u0275\u0275defineInjector({\n      imports: [CommonModule, FormsModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.\u0275setClassMetadata(ZXingScannerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [ZXingScannerComponent],\n      exports: [ZXingScannerComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of zxing-scanner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ZXingScannerComponent, ZXingScannerModule };\n"],
  "mappings": "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",
  "names": []
}
